import { NamedPrompt, PluginSettings, MediaNotesPluginSettings } from './types';

// List of supported video analysis methods
export const VIDEO_ANALYSIS_METHODS = [
	'captions',
	'multimodal',
	'metadata'
] as const;

// List of supported LLM providers
export const LLM_PROVIDERS = [
	'gemini',
	'grok'
] as const;

// List of supported Gemini models
export const GEMINI_MODELS = [
	'gemini-pro',
	'gemini-2.0-flash',
	'gemini-1.5-pro',
	'gemini-1.5-flash',
	'gemini-1.5-pro-vision'
] as const;

// List of supported Grok models
export const GROK_MODELS = [
	'grok-1',
	'grok-1.5-pro',
	'grok-1.5-vision',
	'grok-2-latest'
] as const;

// List of supported summary formats
export const SUMMARY_FORMATS = [
	'standard',
	'detailed',
	'bullet',
	'chapters'
] as const;

// Default prompt for video analysis
export const DEFAULT_PROMPT = `You are a specialized assistant for creating comprehensive video summaries from subtitles. The subtitles have been automatically generated by YouTube and may contain transcription errors, especially with technical terms, software names, and specialized vocabulary.

## Task

Create a concise yet comprehensive summary of the video based on the provided subtitles.

## Handling Transcription Errors

- Correct obvious transcription errors based on context and your domain knowledge
- Pay special attention to technical terms, software names, programming languages, and IDE plugins which are frequently misrecognized
- If multiple interpretations are possible, choose the most likely one based on the video's context

## Output Structure

` + "```" + `
## Summary
[Write a comprehensive summary of the main topic and key message]

## Key points
- [timestamp](timestamp link) [Key point 1] with tag
- [timestamp](timestamp link) [Key point 2] with tag
- [Additional key points...]

## Technical terms
- **[[Term 1]]**: [Explanation of term 1]
- **[[Term 2]]**: [Explanation of term 2]
- [Additional terms as needed...]

## Conclusion
[Write a brief conclusion]
` + "```" + `

Note: Include all sections. If there are no technical terms, omit that section entirely.`;

// Alternative default prompts
export const DEFAULT_PROMPTS: NamedPrompt[] = [
	{
		id: 'default',
		name: 'Default Summary',
		promptText: DEFAULT_PROMPT
	},
	{
		id: 'concise',
		name: 'Concise Summary',
		promptText: `Create a very brief summary of this YouTube video based on the subtitles provided. 
Focus only on the core message and most important points.

Output format:
## Summary
[A 2-3 sentence overview]

## Key Takeaways
- [First key point]
- [Second key point]
- [Third key point]`
	},
	{
		id: 'tutorial',
		name: 'Tutorial Style',
		promptText: `Summarize this tutorial video based on the subtitles provided.

Output format:
## Tutorial Summary
[Overview of what is taught]

## Step-by-step guide
1. [First step]
2. [Second step]
3. [Continue with all main steps...]

## Tools & Resources Mentioned
- [Tool/Resource 1]
- [Tool/Resource 2]

## Tips & Best Practices
- [Tip 1]
- [Tip 2]`
	}
];

// Default settings for the plugin
export const DEFAULT_SETTINGS: PluginSettings = {
    // API Keys
    apiKey: "",
    geminiApiKey: "",
    grokApiKey: "",
    youtubeApiKey: "",

    // LLM Provider settings
    llmProvider: "gemini",
    modelName: "gemini-pro",
    temperatureVal: 0.2,
    maxOutputTokens: 8192,
    topK: 40,
    topP: 0.95,

    // Prompt settings
    promptTemplate: "",
    customPrompt: DEFAULT_PROMPT,
    savedPrompts: DEFAULT_PROMPTS,
    selectedPromptId: "default",
    hidePrompt: true,
    formatOutput: true,

    // Video analysis settings
    videoAnalysisMethod: "captions",
    summaryFormat: "standard",
    includeTimestamps: true,
    multimodalEnabled: true,
    fallbackToMetadata: true,

    // Content generation settings
    genSummary: true,
    genKeyIdeas: true,
    genResearchQuestions: false,
    genActionItems: false,

    // Video content settings
    videoIdExtractRegex: "",
    includeVideoTitle: true,
    includeThumbnail: true,
    includeVideoMetaData: true,

    // File organization settings
    organizationEnabled: false,
    fileNameTemplate: "YT - {{title}}",
    folderStructure: "",
    organizationFolder: "",
    folderPath: "",

    // Media player settings
    mediaPlayerEnabled: true,
    seekSeconds: 10,
    verticalPlayerHeight: 40,
    horizontalPlayerWidth: 40,
    timestampTemplate: "[{ts}]({link})\n",
    timestampOffsetSeconds: 0,
    backgroundColor: "#000000",
    progressBarColor: "#FF0000",
    displayProgressBar: true,
    displayTimestamp: true,
    pauseOnTimestampInsert: true,
    defaultSplitMode: "Horizontal",
    unloadHiddenPlayers: true,
    playerHeight: 400, // Default height for the main player
    playerWidth: 100, // Default width for the main player (in percentage)
    mediaData: {},
    autoOpenMiniPlayerOnTimestampClick: true,

    // Mini-player settings
    miniPlayerEnabled: true,
    rememberMiniPlayerPosition: true,
    enableKeyboardShortcuts: true,
    miniPlayerPosition: { left: 20, top: 20 },
    miniPlayerDefaultWidth: 320,
    miniPlayerDefaultHeight: 220,
    
    // Legacy mini-player settings (for compatibility)
    miniPlayerX: 20,
    miniPlayerY: 20,
    miniPlayerWidth: 320,
    miniPlayerHeight: 220,
    savedTimestamps: {}
};

export const MODEL_NAMES = [
    "gemini-pro"
];

// Regex pattern for extracting video title from meta tag
export const TITLE_REGEX = /"title":"([^"]+)"/;

// Regex pattern for extracting video ID from YouTube URL
export const VIDEO_ID_REGEX = /(?:v=|\/)([a-zA-Z0-9_-]{11})/;

// Regex pattern for extracting video author from meta tag
export const AUTHOR_REGEX = /"author":"([^"]+)"/;

// Regex pattern for extracting channel ID from video page
export const CHANNEL_ID_REGEX = /"channelId":"([^"]+)"/;
